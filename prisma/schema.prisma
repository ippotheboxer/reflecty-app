generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid()) @db.Uuid
  email            String        @unique(map: "user_email_idx")
  emailVerified    DateTime?     @db.Timestamp(6)
  password         String?
  name             String        @default("NO_NAME")
  timezone         String?
  location         String?
  journals         Journal[]
  customTypes      JournalType[] @relation("CustomTypes")
  customPrompts    Prompt[]      @relation("CustomPrompts")
  moodEntries      MoodEntry[]
  habits           Habit[]
  quotes           Quote[]       @relation("UserQuotes")
  useDefaultQuotes Boolean       @default(true)
  createdAt        DateTime      @default(now()) @db.Timestamp(6)
  updatedAt        DateTime      @updatedAt

  accounts Account[]
  sessions Session[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Journal {
  id        String      @id @default(uuid()) @db.Uuid
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.Uuid
  type      JournalType @relation(fields: [typeId], references: [id])
  typeId    String      @db.Uuid
  content   String
  createdAt DateTime    @default(now())
}

model JournalType {
  id       String    @id @default(uuid()) @db.Uuid
  name     String
  prompts  Prompt[]
  isCustom Boolean   @default(false)
  user     User?     @relation("CustomTypes", fields: [userId], references: [id])
  userId   String?   @db.Uuid
  Journal  Journal[]
}

model Prompt {
  id       String      @id @default(uuid()) @db.Uuid
  question String
  type     JournalType @relation(fields: [typeId], references: [id])
  typeId   String      @db.Uuid
  isCustom Boolean     @default(false)
  user     User?       @relation("CustomPrompts", fields: [userId], references: [id])
  userId   String?     @db.Uuid
}

model MoodEntry {
  id         String     @id @default(uuid()) @db.Uuid
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @db.Uuid
  mood       MoodRating
  date       DateTime   @default(now())
  activities Activity[] @relation("MoodActivities")
}

model Activity {
  id          String      @id @default(uuid()) @db.Uuid
  name        String      @unique
  moodEntries MoodEntry[] @relation("MoodActivities")
}

enum MoodRating {
  AMAZING
  GOOD
  OKAY
  BAD
  TERRIBLE
}

model Habit {
  id          String            @id @default(uuid()) @db.Uuid
  name        String
  user        User              @relation(fields: [userId], references: [id])
  userId      String            @db.Uuid
  streak      Int               @default(0)
  completions HabitCompletion[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model HabitCompletion {
  id      String   @id @default(uuid()) @db.Uuid
  habit   Habit    @relation(fields: [habitId], references: [id])
  habitId String   @db.Uuid
  date    DateTime
}

model Quote {
  id        String  @id @default(uuid()) @db.Uuid
  text      String
  author    String?
  isDefault Boolean @default(false)
  user      User?   @relation("UserQuotes", fields: [userId], references: [id])
  userId    String? @db.Uuid
}
